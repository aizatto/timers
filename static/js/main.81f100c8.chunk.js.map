{"version":3,"sources":["Navbar.tsx","Timer.tsx","Page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","_useState","useState","_useState2","Object","slicedToArray","collapsed","setCollapsed","react_default","a","createElement","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","className","NavItem","NavLink","Timer","props","totalMs","ms","seconds","Math","floor","minutes","hours","string","concat","toString","padEnd","style","fontFamily","Page","id","uuidv4","label","date","time","timers","setTimers","rows","map","timer","index","difference","key","src_Timer","Input","onChange","e","newLabel","target","value","defaultValue","Fragment","Button","newTimers","slice","push","Date","App","setTime","useEffect","interval","setInterval","clearInterval","Navbar_Navbar","Container","src_Page","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81f100c8.chunk.js","sourcesContent":["/**\n * https://reactstrap.github.io/components/navbar/\n */\nimport React, { useState } from 'react';\nimport {\n  Collapse,\n  Nav,\n  Navbar as BootstrapNavbar,\n  NavbarBrand,\n  NavLink,\n  NavItem,\n  NavbarToggler,\n} from 'reactstrap';\n\nexport default function Navbar() {\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <BootstrapNavbar color=\"dark\" dark expand=\"md\">\n      <NavbarBrand href=\"https://www.aizatto.com\">aizatto.com</NavbarBrand>\n      <NavbarToggler onClick={() => setCollapsed(!collapsed)} />\n      <Collapse isOpen={collapsed} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink href=\"https://www.aizatto.com/\">aizatto.com</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.deepthoughtapp.com/\">Deep Thought</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.logbook.my/\">Logbook</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://github.com/aizatto/timestamp-js\">GitHub</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.linkedin.com/in/aizatto\">LinkedIn</NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </BootstrapNavbar>\n  );\n}\n","import React from 'react';\n\ninterface Props {\n  ms: number\n}\n\nconst Timer: React.FC<Props> = (props) => {\n  const totalMs = props.ms;\n\n  const ms = props.ms % 1000;\n  const seconds = Math.floor(totalMs / 1000 % 60);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n\n  let string = '';\n  if (hours) {\n    string += `${hours}h`;\n  }\n\n  if (minutes) {\n    string += `${minutes}m`;\n  }\n\n  string += `${seconds}s${ms.toString().padEnd(3, '0')}`;\n\n  return <span style={{fontFamily: 'monospace'}}>{string}</span>;\n}\n\nexport default Timer;","import React, { useState } from 'react';\nimport uuidv4 from 'uuid/v4';\nimport { Button, Input } from 'reactstrap';\n\nimport Timer from './Timer';\n\ninterface Props {\n  time: Date\n}\n\nconst Page: React.FC<Props> = (props) => {\n  const [timers, setTimers] = useState(() => [{\n    id: uuidv4(),\n    label: 'Start time',\n    date: props.time,\n  }]);\n\n  const rows = timers.map((timer, index) => {\n    // @ts-ignore\n    const difference = props.time - timer.date;\n    // moment(timer.date).format('YYYY/MM/DD LTS - [W]W/[D]E dddd')\n\n    const onChange = (newLabel: string) => {\n      // const newTimers = timers.slice();\n      timers[index].label = newLabel;\n      // setTimers(newTimers);\n    }\n\n    return (\n      <tr key={timer.id}>\n        <td className=\"text-right\"><Timer ms={difference} /></td>\n        <td>\n          <Input onChange={(e) => onChange(e.target.value)} defaultValue={timer.label} />\n        </td>\n      </tr>\n    );\n  });\n\n  const onClick = () => {\n    const newTimers = timers.slice();\n    newTimers.push({\n      id: uuidv4(),\n      label: '',\n      date: new Date(),\n    });\n    setTimers(newTimers);\n  }\n\n  return (\n    <>\n      <table className=\"table\">\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n      <Button onClick={onClick}>\n        Add and Start\n      </Button>\n    </>\n  );\n}\n\nexport default Page;","import React, { useState, useEffect } from 'react';\nimport { Container } from 'reactstrap';\n\nimport './bootstrap.min.css';\nimport Navbar from './Navbar';\nimport Page from './Page';\n\nconst INTERVAL = 100;\n\nconst App: React.FC = () => {\n  const [time, setTime] = useState(() => new Date());\n  useEffect(() => {\n    // Do we use setTimeout or setInterval\n    // Using setTimeout may call too many times\n    // Basic testing returned maxium stack\n    const refresh = () => {\n      setTime(new Date());\n    };\n\n    const interval = setInterval(refresh, INTERVAL);\n\n    return () => {\n      clearInterval(interval);\n    }\n  }, [time]);\n\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Container className=\"pt-3\">\n        <Page time={time} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}